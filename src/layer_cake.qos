#!/bin/sh
# Cero3 Shaper
# A cake shaper and AQM solution that allows several diffserv marking schemes
# for ethernet gateways

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#       Copyright (C) 2012-5 Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller


#sm: TODO pass in the cake diffserv keyword

. ${SQM_LIB_DIR}/defaults.sh
QDISC=cake

# Default traffic classication is passed in INGRESS_CAKE_OPTS and EGRESS_CAKE_OPTS, defined in defaults.sh now


ipt_setup() {

    sqm_debug "cake does all the diffserv work - no need for iptables rules"

    #kdb: cake can choose to use DSCP for classification (none = besteffort, others diffserv3,4 etc)
    #kdb: and clear those DSCP bits (wash) on egress of the qdisc independently
    #kdb: FIXME: Permit independent selection of DSCP clearing for ingress/egress qdiscs - needs gui tweak
    #kdb: these are really horrible, non-intuitive variable names, something like DSCP_INGRESS_ZERO and DSCP_INGRESS_IGNORE ?
    #kdb: with matching for EGRESS.
    if [ "$SQUASH_DSCP" = "1" ]
    then
	sqm_debug "Clearing differentiated services code points (DSCP) from ingress."
	INGRESS_CAKE_ZERO_OPTS="wash"
	EGRESS_CAKE_ZERO_OPTS="wash"
    else
	sqm_debug "Keeping differentiated services code points (DSCP) from ingress."
	INGRESS_CAKE_ZERO_OPTS="" # default is effectively "nowash"
	EGRESS_CAKE_ZERO_OPTS=""  # default is effectively "nowash"
    fi

}


egress() {

    EGRESS_CAKE_OPTS="${EGRESS_CAKE_OPTS} ${EGRESS_CAKE_ZERO_OPTS}"

    $TC qdisc del dev $IFACE root 2> /dev/null
    $TC qdisc add dev $IFACE root $( get_stab_string ) cake bandwidth ${UPLINK}kbit $( get_cake_lla_string ) ${EGRESS_CAKE_OPTS} ${EQDISC_OPTS}

}


ingress() {

    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    $TC qdisc del dev $DEV root  2> /dev/null

#DSCP_IGNORE
    if [ "$SQUASH_INGRESS" = "1" ]
    then
	sqm_debug "Do not perform DSCP based traffic classification on ingress. (single tin)"
	# Revert to no dscp based classification ie. ignore DSCP
	INGRESS_CAKE_OPTS="besteffort ${INGRESS_CAKE_ZERO_OPTS}"
    else
	sqm_debug "Perform DSCP based traffic classification on ingress. (multi-tier classification)"
	INGRESS_CAKE_OPTS="${INGRESS_CAKE_OPTS} ${INGRESS_CAKE_ZERO_OPTS}"
    fi

    $TC qdisc add dev $DEV root $( get_stab_string ) cake bandwidth ${DOWNLINK}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}

    $IP link set dev $DEV up

    # redirect all IP packets arriving in $IFACE to ifb0

    $TC filter add dev $IFACE parent ffff: protocol all prio 10 u32 \
	match u32 0 0 flowid 1:1 action mirred egress redirect dev $DEV
}

sqm_start() {
    [ -n "$IFACE" ] || return 1
    do_modules
    verify_qdisc $QDISC "cake" || return 1
    sqm_debug "Starting ${SCRIPT}"

    [ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )

    ipt_setup

    if [ "${UPLINK}" -ne 0 ];
    then
        egress
        sqm_debug "egress shaping activated"
    else
        sqm_debug "egress shaping deactivated"
        $TC qdisc del dev ${IFACE} root 2> /dev/null
    fi
    if [ "${DOWNLINK}" -ne 0 ];
    then
	verify_qdisc ingress "ingress" || return 1
        ingress
        sqm_debug "ingress shaping activated"
    else
        sqm_debug "ingress shaping deactivated"
        $TC qdisc del dev ${DEV} root 2> /dev/null
        $TC qdisc del dev ${IFACE} ingress 2> /dev/null
    fi

    return 0
}
