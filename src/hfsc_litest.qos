#!/bin/sh
################################################################################
# hfsc_litest.qos
#
# Problem: You enable QOS to prevent 2000 ms delays on your cable service, but
# your costly 100/10 Mbps service now only makes 50/10 through QOS. Well neither
# situation is pleasing.
#
# Root Cause: Shapers eat CPU for breakfast. Its a lot of extra handling. When
# the interrupt period expands for shaping tasks, then you will have one of two
# failure modes. Strict shapers (HTB) will skip packets and have a bandwidth
# cap, but preserve ideal delay. Loose shapers (HFSC) will borrow extra
# buffering across the interrupt gap providing full bandwidth, but with some
# delay proportional to the CPU lag.
#
# Solution: You need to pick your poison. Strict delay control at the cost of
# bandwidth hard cap. Nearly full bandwidth with proportionally growing delay.
# 
# Implementation: This HFSC configuration is bare minimum, one band in and out.
#
################################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#   Copyright (C) 2015 Eric Luehrsen
#
################################################################################

. ${SQM_LIB_DIR}/defaults.sh

################################################################################

egress() {   
  UPLINK_C=$(( ${UPLINK} * 50 / 49 ))
  
  # Tree Removal Special includes Stump Grinding
  $TC qdisc del dev $IFACE root 2>/dev/null
  
  # Root Class
  # The SC curve (LS+RT) includes feedback in virtual time, but the UL 
  # ceiling is pure real time. If UL=SC, then you cant actually get SC.
  $TC qdisc add dev $IFACE root handle 1: `get_stab_string` hfsc default 1
  $TC class add dev $IFACE parent 1: classid 1:1 hfsc \
    sc m1 ${UPLINK_C}kbit d 1s m2 ${UPLINK}kbit ul rate ${UPLINK_C}kbit
  
  # Leaf QDISC
  $TC qdisc add dev $IFACE parent 1:1 handle 110: ${QDISC} \
    `get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
    `get_flows ${UPLINK}` ${EQDISC_OPTS}
    
  # We could filter FLOW here to get CONTACK address/ports, and if present,
  # this works around the NAT. Though, that would be more CPU work, and NAT will
  # use unique ports for each conneciton. So, leaf QDISC _should_ hash that.
}

################################################################################

ingress() {
  DOWNLINK_C=$(( ${DOWNLINK} * 50 / 49 ))
  
  # Virtual Ingress Port
  $TC qdisc del dev $IFACE handle ffff: ingress 2>/dev/null
  $TC qdisc add dev $IFACE handle ffff: ingress
  
  # Tree Removal Special includes Stump Grinding
  $TC qdisc del dev $DEV root 2>/dev/null
  
  # Root Class
  # The SC curve (LS+RT) includes feedback in virtual time, but the UL 
  # ceiling is pure real time. If UL=SC, then you cant actually get SC.
  $TC qdisc add dev $DEV root handle 1: `get_stab_string` hfsc default 1
  $TC class add dev $DEV parent 1: classid 1:1 hfsc \
    sc m1 ${DOWNLINK_C}kbit d 1s m2 ${DOWNLINK}kbit ul rate ${DOWNLINK_C}kbit
  
  # Leaf QDISC
  $TC qdisc add dev $DEV parent 1:1 handle 110: $QDISC \
    `get_limit ${ILIMIT}` `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` \
    `get_flows ${DOWNLINK}` ${IQDISC_OPTS}
  
  # We could filter FLOW here to get CONTACK address/ports, and if present,
  # this works around the NAT. Though, that would be more CPU work, and NAT will
  # use unique ports for each conneciton. So, leaf QDISC _should_ hash that.
  
  # Redirect $IFACE to Virtual Ingress
  ip link set dev $DEV up
  
  $TC filter add dev $IFACE parent ffff: protocol all prio 15 u32 \
    match u32 0 0 flowid 1:1 action mirred egress redirect dev $DEV
}

################################################################################

sqm_start() {
  sqm_debug "Starting ${SCRIPT}"
  
  [ -n "$IFACE" ] || return 1
    
  do_modules
  verify_qdisc "hfsc" || return 1
  verify_qdisc $QDISC || return 1
  
  [ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )
  
  if [ "$UPLINK" -ne 0 ];
  then
    egress
    sqm_debug "egress shaping activated"
  else
    $TC qdisc del dev $IFACE root 2> /dev/null
    sqm_debug "egress shaping deactivated"
  fi
   
  if [ "$DOWNLINK" -ne 0 ];
  then
    verify_qdisc ingress "ingress" || return 1
    ingress
    sqm_debug "ingress shaping activated"
  else
    $TC qdisc del dev $DEV root 2> /dev/null
    $TC qdisc del dev $IFACE ingress 2> /dev/null
    sqm_debug "ingress shaping deactivated"
  fi

  return 0
}

################################################################################

